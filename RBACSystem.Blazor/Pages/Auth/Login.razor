@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using RBACSystem.Blazor.Models
@using RBACSystem.Blazor.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject ISnackbar Snackbar

<MudCard Class="mx-auto" Style="max-width: 500px; margin-top: 100px;">
    <MudCardHeader>
        <MudText Typo="Typo.h4">Login</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudForm Model="@LoginModel" @ref="form" @onsubmit="HandleLogin">
            <MudTextField @bind-Value="@LoginModel.Email" 
                          Label="Email" 
                          Required="true" 
                          RequiredError="Email is required"
                          For="@(() => LoginModel.Email)"/>
            
            <MudTextField @bind-Value="@LoginModel.Password" 
                          Label="Password" 
                          Required="true" 
                          RequiredError="Password is required"
                          InputType="InputType.Password"
                          For="@(() => LoginModel.Password)"/>
            
            <MudButton ButtonType="ButtonType.Submit" 
                       Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       FullWidth="true"
                       Class="mt-4">
                Login
            </MudButton>
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudText Class="mx-auto">Don't have an account? <MudLink Href="/register">Register</MudLink></MudText>
    </MudCardActions>
</MudCard>

@code {
    private LoginModel LoginModel { get; set; } = new LoginModel();
    private MudForm? form;
    
    private async Task HandleLogin()
    {
        await form!.Validate();
        
        if (form.IsValid)
        {
            var result = await AuthService.Login(LoginModel);
            
            if (result.Success)
            {
                await LocalStorage.SetItemAsync("authToken", result.Token);
                await LocalStorage.SetItemAsync("user", result.User);
                ((CustomAuthStateProvider)AuthStateProvider).NotifyUserAuthentication(result.Token);
                Snackbar.Add("Login successful", Severity.Success);
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                Snackbar.Add(result.Error ?? "Login failed", Severity.Error);
            }
        }
    }
}